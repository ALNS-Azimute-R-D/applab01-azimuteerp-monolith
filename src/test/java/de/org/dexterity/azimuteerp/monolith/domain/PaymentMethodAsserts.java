package de.org.dexterity.azimuteerp.monolith.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentMethodAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentMethodAllPropertiesEquals(PaymentMethod expected, PaymentMethod actual) {
        assertPaymentMethodAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentMethodAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentMethodAllUpdatablePropertiesEquals(PaymentMethod expected, PaymentMethod actual) {
        assertPaymentMethodUpdatableFieldsEquals(expected, actual);
        assertPaymentMethodUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentMethodAutoGeneratedPropertiesEquals(PaymentMethod expected, PaymentMethod actual) {
        assertThat(expected)
            .as("Verify PaymentMethod auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentMethodUpdatableFieldsEquals(PaymentMethod expected, PaymentMethod actual) {
        assertThat(expected)
            .as("Verify PaymentMethod relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e -> assertThat(e.getBusinessHandlerClazz()).as("check businessHandlerClazz").isEqualTo(actual.getBusinessHandlerClazz())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentMethodUpdatableRelationshipsEquals(PaymentMethod expected, PaymentMethod actual) {}
}
