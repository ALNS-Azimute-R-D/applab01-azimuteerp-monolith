package de.org.dexterity.azimuteerp.monolith.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocalityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAllPropertiesEquals(Locality expected, Locality actual) {
        assertLocalityAutoGeneratedPropertiesEquals(expected, actual);
        assertLocalityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAllUpdatablePropertiesEquals(Locality expected, Locality actual) {
        assertLocalityUpdatableFieldsEquals(expected, actual);
        assertLocalityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAutoGeneratedPropertiesEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityUpdatableFieldsEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality relevant properties")
            .satisfies(e -> assertThat(e.getAcronym()).as("check acronym").isEqualTo(actual.getAcronym()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getGeoPolygonArea()).as("check geoPolygonArea").isEqualTo(actual.getGeoPolygonArea()))
            .satisfies(
                e ->
                    assertThat(e.getGeoPolygonAreaContentType())
                        .as("check geoPolygonArea contenty type")
                        .isEqualTo(actual.getGeoPolygonAreaContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityUpdatableRelationshipsEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality relationships")
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()));
    }
}
